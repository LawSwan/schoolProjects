-- 1. Add foreign key constraints
ALTER TABLE ORDERS
ADD CONSTRAINT fk_orders_user
FOREIGN KEY (USERID) REFERENCES USERBASE(USERID);

ALTER TABLE REVIEWS
ADD CONSTRAINT fk_reviews_user
FOREIGN KEY (USERID) REFERENCES USERBASE(USERID);

ALTER TABLE REVIEWS
ADD CONSTRAINT fk_reviews_product
FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTLIST(PRODUCTCODE);

ALTER TABLE USERLIBRARY
ADD CONSTRAINT fk_userlibrary_user
FOREIGN KEY (USERID) REFERENCES USERBASE(USERID);

ALTER TABLE USERLIBRARY
ADD CONSTRAINT fk_userlibrary_product
FOREIGN KEY (PRODUCTCODE) REFERENCES PRODUCTLIST(PRODUCTCODE);

-- 2. Show full name and USERNAME of users 18+ years old
SELECT 
  FIRSTNAME || ' ' || LASTNAME AS FULL_NAME,
  USERNAME
FROM USERBASE
WHERE MONTHS_BETWEEN(SYSDATE, TO_DATE(BIRTHDAY, 'MM/DD/YYYY')) / 12 >= 18;

-- 3. Max and average length of USERNAME
SELECT 
  MAX(LENGTH(USERNAME)) AS max_length,
  ROUND(AVG(LENGTH(USERNAME)), 2) AS avg_length
FROM USERBASE;

-- 4. Questions that start with 'What is' or 'What was'
SELECT QUESTION
FROM SECURITYQUESTION
WHERE QUESTION LIKE 'What is%'
   OR QUESTION LIKE 'What was%';

-- 5. Product popularity based on reviews
SELECT PRODUCTCODE, 
       MIN(RATING) AS LOWEST_RATING, 
       COUNT(*) AS REVIEW_COUNT
FROM REVIEWS
GROUP BY PRODUCTCODE
ORDER BY REVIEW_COUNT DESC;

-- 6. Wishlist position 1 rankings
SELECT PRODUCTCODE, 
       COUNT(*) AS USERS_AT_POSITION_1
FROM WISHLIST
WHERE POSITION = 1
GROUP BY PRODUCTCODE;

-- 7. Display the USERID and the total amount each user has spent in ORDERS
SELECT USERID, 
       SUM(PRICE) AS TOTAL_SPENT
FROM ORDERS
GROUP BY USERID;

-- 8. Gross profits by PURCHASEDATE, sorted by total descending
SELECT PURCHASEDATE,
       SUM(PRICE) AS TOTAL_PROFIT
FROM ORDERS
GROUP BY PURCHASEDATE
ORDER BY TOTAL_PROFIT DESC;

-- 9. Top 5 games with the most play time
SELECT PRODUCTCODE,
       SUM(HOURSPLAYED) AS TOTAL_HOURS
FROM USERLIBRARY
GROUP BY PRODUCTCODE
ORDER BY TOTAL_HOURS DESC
FETCH FIRST 5 ROWS ONLY;


-- 10. View of USERID and infraction count
CREATE OR REPLACE VIEW infraction_count_view AS
SELECT USERID,
       COUNT(*) AS infraction_count
FROM INFRACTIONS
GROUP BY USERID
ORDER BY infraction_count DESC;

-- 11. View of USERID, RULENUM, and count of violations
CREATE OR REPLACE VIEW rule_violations_view AS
SELECT USERID,
       RULENUM,
       COUNT(*) AS violation_count
FROM INFRACTIONS
GROUP BY USERID, RULENUM
ORDER BY USERID;

-- Question 12
SELECT 
  RULENUM,
  DESCRIPTION AS PENALTY,
  COUNT(*) AS PENALTY_COUNT
FROM INFRACTIONS
GROUP BY RULENUM, DESCRIPTION;

-- Question 13
SELECT 
  ROUND(AVG(DATEUPDATED - DATESUBMITTED)) AS avg_days,
  MAX(DATEUPDATED - DATESUBMITTED) AS max_days,
  MIN(DATEUPDATED - DATESUBMITTED) AS min_days
FROM USERSUPPORT
WHERE STATUS = 'CLOSED';

-- Question 14
SELECT 
  EMAIL, 
  ISSUE, 
  COUNT(*) AS issue_count, 
  DATESUBMITTED
FROM USERSUPPORT
WHERE STATUS = 'NEW'
GROUP BY EMAIL, ISSUE, DATESUBMITTED
ORDER BY issue_count DESC;

-- Question 15
SELECT USERID, FIRSTNAME, LASTNAME, PASSWORD
FROM USERBASE
WHERE LOWER(PASSWORD) LIKE '%' || LOWER(FIRSTNAME) || '%'
   OR LOWER(PASSWORD) LIKE '%' || LOWER(LASTNAME) || '%';

   -- Question 16
SELECT PUBLISHER, ROUND(AVG(PRICE), 2) AS AVG_PRICE
FROM PRODUCTLIST
GROUP BY PUBLISHER
ORDER BY PUBLISHER;

-- Question 17
CREATE OR REPLACE VIEW old_products_discounted AS
SELECT 
    PRODUCTNAME,
    ROUND(PRICE * 0.75, 2) AS DISCOUNTED_PRICE
FROM 
    PRODUCTLIST
WHERE 
    RELEASEDATE < ADD_MONTHS(SYSDATE, -60);

--- Question 18
SELECT 
    GENRE,
    MAX(PRICE) AS MAX_PRICE,
    MIN(PRICE) AS MIN_PRICE
FROM 
    PRODUCTLIST
GROUP BY 
    GENRE;

    -- Question 19
CREATE OR REPLACE VIEW recent_chatlog_view AS
SELECT *
FROM CHATLOG
WHERE DATESENT BETWEEN SYSDATE - 7 AND SYSDATE;

--Question 20
CREATE OR REPLACE VIEW recent_penalties_view AS
SELECT USERID, DATEASSIGNED, DESCRIPTION AS PENALTY
FROM INFRACTIONS
WHERE DESCRIPTION IS NOT NULL
AND DATEASSIGNED >= ADD_MONTHS(SYSDATE, -1);
